# application.yml
--- 
spring: 
  application: 
    name: connessioni
  kafka:
     consumer:
        bootstrap-servers: ${DOCKER_HOST_IP:10.11.1.121}:9092
        group-id: ${spring.application.name}
        auto-offset-reset: earliest
        key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
        value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
     producer:
        bootstrap-servers: ${DOCKER_HOST_IP:10.11.1.121}:9092
        key-serializer: org.apache.kafka.common.serialization.StringSerializer
        value-serializer: org.apache.kafka.common.serialization.StringSerializer
  cloud:
    consul:
      host: consul
      port: 8500
      discovery: 
        instanceId: ${spring.application.name}-${spring.cloud.client.hostname}-${random.value}
        healthCheckPath: /actuator/health
        healthCheckInterval: 10s
        # configurazione per effettuare esprimenti, NON USARE UN PRODUZIONE 
        # dopo quanto tempo consul deve smettere di restituire servizi che non rispondono all'health check? 
        healthCheckCriticalTimeout: 60s
        # consul deve restituire solo servizi che passano l'health check (default=false) 
        queryPassing: true 
    loadbalancer: 
      ribbon.enabled: false 
      
  jpa:
    database: POSTGRESQL
    show-sql: true
    hibernate:
      ddl-auto: create-drop
      use-new-id-generator-mappings: true
  datasource:
    platform: postgres
    url: jdbc:postgresql://postgres2:5432/connessioni
    username: postgres
    password: postgres
    driverClassName: org.postgresql.Driver

server: 
  port: ${PORT:${SERVER_PORT:0}}
#  port: 8080

# fa il logging dei comandi sql eseguiti 
#spring.jpa.show-sql: true
# disable OSIV
spring.jpa.open-in-view: false
